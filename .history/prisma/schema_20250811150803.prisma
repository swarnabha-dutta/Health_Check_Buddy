// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  clerkUserId       String    @unique // Clerk's user ID
  email             String    @unique
  name              String?
  imageUrl          String?
  role              UserRole  @default(UNASSIGNED) // UNASSIGNED, PATIENT, DOCTOR, ADMIN
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Patient-specific fields
  credits           Int       @default(2) // Accumulated credit balance
  
  // Doctor-specific fields
  specialty         String?
  experience        Int?      // Years of experience
  credentialUrl     String?   // Document URL
  description       String?   @db.Text
  verificationStatus VerificationStatus?  @default(PENDING)
  
  // Relations
  patientAppointments Appointment[] @relation("PatientAppointments")
  doctorAppointments  Appointment[] @relation("DoctorAppointments")
  availabilities      Availability[]
  transactions        CreditTransaction[]
  payouts             Payout[]
}


enum UserRole{
  UNASSIGNED
  PATIENT
  DOCTOR
  ADMIN
}

enum VerificationStatus{
  PENDING
  VERIFIED
  REJECTED
}

model Availability{
  id                String   @id @default(uuid())
  patientId         String
  patient           User     @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId          String
  doctor            User     @relation("DoctorAppointments", fields: [doctorId], references: [id])
  startTime         DateTime // Start time of appointment
  endTime           DateTime // End time of appointment
  status            AppointmentStatus @default(SCHEDULED)
  notes             String?  @db.Text
  patientDescription String? @db.Text
    
  // Video session fields
  videoSessionId    String?  // Vonage Video API Session ID
  videoSessionToken String?  // Optional: Can store tokens if needed
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([status, startTime])
  @@index([doctorId, startTime])
}

enum AppointmentStatus{
  SCHEDULED
  COMPLETED
  CANCELLED
}